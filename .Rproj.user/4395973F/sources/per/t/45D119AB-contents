# Non equilibrium surplus production models
# Written by: Abdullah Habibi (abd.habibi@gmail.com)
# Date: March 15, 2022

# df preparation
# lemuru - hesti 
lemuruID <- data.frame(year=c(1974:2010),
                       catch=c(6380,22900,32780.5,49621.78,30746.26,34501.82,27908.9,29145.23,38558.08,35216.7,31012.25,14976.87,3265.35,11696.87,
                               31462.73,32590.57,38500.75,48694.64,35880.39,41161.98,39181.58,15602.52,8526.11,56955.48,74175.82,11616.72,12184.68,
                               16349.38,37098.39,38432.76,22825.98,19160.7,60886.71,76849.74,55666,60008,33468),
                       effort=c(1972,8330,21420,27576,27818,32015,14003,21242,18393,15221,13646,9555,6005,9909,10075,12302,17964,19034,17450,10495,
                                12250,9030,9955,13443,23813,10055,17012,27292,25643,22532,28042,40205,41953,37953,39480,47880,43512)) #trip
prior.r <- c(1.19, 0.79, 1.79) # mean, lci, uci

plot(lemuruID$catch/lemuruID$effort, type="l")

# orange roughy, spawning plume p.44
oroughNZ <- data.frame(year=c(1979:2006), #NA 1993
                       catch=c(10074,10569,3944,3916,6362,8896,8322,7897,7775,7036,6829,2805,653,54,((54+487)/2),487,
                               1261,792,1545,377,889,739,2062,2019,1968,1868,1616,1970),
                       effort=c(883,822,297,215,341,651,637,566,607,589,403,237,85,2,((2+86)/2),86,
                                107,73,103,38,33,42,135,116,125,203,101,118)) #tows
prior.r <- c(0.06, 0.04, 0.1) # mean, lci, uci

plot(oroughNZ$catch/oroughNZ$effort, type="l") # quick plot the CPUE df

tail(lemuruID$year, 1)

# create schaefer function
NEq.Sch <- function(inpars, df){
  k <- inpars[1]
  B0 <- inpars[2]
  r <- inpars[3]
  q <- inpars[4]
  
  CPUE <- df$catch/df$effort
  EstCatch <- EstCPUE <- EstBt <- vector(length=nrow(df))
  
  EstBt[1] <- B0
  for (i in 1:(nrow(df)-1)){
    EstBt[i+1] <- EstBt[i]+EstBt[i]*exp(r)*(1-(EstBt[i]/k))-df[i,2]
  }
  for (i in 1:nrow(df)){
    EstCatch[i] <- EstBt[i]*exp(q)*df[i,3]
    EstCPUE[i] <- EstBt[i]*exp(q)
  }
  
  plot(CPUE, xlab="Year", ylab="CPUE", type="b", col="blue")
  lines(EstCPUE, type="b", col="red")
  legend("topright", legend=c("Observation", "Estimation"), lty=c(1, 1), col=c("blue", "red"), box.lty=1, cex=0.7)

  return(data.frame(year=df$year, CPUE=CPUE, EstBt=EstBt, EstCatch=EstCatch, EstCPUE=EstCPUE))
}

# create minimizing function
NEq.Sch_opt <- function(inpars, df){
  k <- inpars[1]
  B0 <- inpars[2]
  #log.r <- log(inpars[3])
  #log.q <- log(inpars[4])
  #r <-  0.79+(1.79-0.79)*(atan(inpars[3])+pi/2)/pi #inpars[3] 
  #q <-  0.000015+(0.000025-0.000015)*(atan(inpars[4])+pi/2)/pi #inpars[4]
  r <- inpars[3]
  q <- inpars[4]
  
  
  sigma <- 0.2
  CPUE <- df$catch/df$effort
  EstCatch <- EstCPUE <- EstBt <- vector(length=nrow(df))
  
  EstBt[1] <- B0
  for (i in 1:(nrow(df)-1)){
  #  r <- exp(log.r)
    EstBt[i+1] <- max(EstBt[i]+EstBt[i]*exp(r)*(1-(EstBt[i]/k))-df[i,2], 0.1)
  }
  for (i in 1:nrow(df)){
  #  q <- exp(log.q)
    EstCatch[i] <- EstBt[i]*exp(q)*df[i,3]
    EstCPUE[i] <- EstBt[i]*exp(q)
  }

  #res <- sum(0.5*log(2*pi)+log(sigma)+(CPUE-EstCPUE)^2/(2*sigma^2)) # NLL normal distribution
  res <- sum(0.5*log(2*pi)+log(sigma)+log(CPUE)+(log(CPUE)-log(EstCPUE))^2/(2*sigma^2)) # NLL lognormal distribution
  #res <- sum((log(CPUE)-log(EstCPUE))^2) # NLL SSQ
  return(res)
}

inpars <- c(max(lemuruID$catch)*2, #k
            max(lemuruID$catch)*0.9, #B0
            log(1.19), #r
            log(0.00002)) #q
NEq.Sch_opt(inpars=inpars, df=lemuruID)

# optimization function
optim(par=inpars, fn=NEq.Sch_opt, df=lemuruID, method="Nelder-Mead")

# projection function
NEq.Sch_proj <- function(inpars, df, nyears, rsigma){
  k <- inpars[1]
  B0 <- inpars[2]
  r <- inpars[3]
  q <- inpars[4]
  
  EMSY <- r/(2*q) #effort at MSY
  BMSY <- k/2 #biomass at MSY
  MSY <- (r*k)/4 #MSY
  
  EBt.msy <- EBt.Emsy <- vector(length=nrow(df))
  
  Year <- E.msy <- E.Emsy <- C.msy <- C.Emsy <- vector(length=nrow(df)+nyears)
  Year <- df$year[1]:(df$year[1]+nrow(df)+nyears-1)
  
  # observation df
  EBt.msy[1] <- EBt.Emsy[1] <- B0
  for (i in 1:(nrow(df))){
    EBt.msy[i+1] <- EBt.msy[i]+EBt.msy[i]*r*(1-(EBt.msy[i]/k))-df[i,2]
    EBt.Emsy[i+1] <- EBt.Emsy[i]+EBt.Emsy[i]*r*(1-(EBt.Emsy[i]/k))-df[i,2]
  }
  
  E.msy[1:(nrow(df))] <- E.Emsy[1:(nrow(df))] <- df$effort
  C.msy[1:(nrow(df))] <- C.Emsy[1:(nrow(df))] <- df$catch
  
  # projection based on msy measure
  for (i in (nrow(df)+1):((nrow(df))+nyears)){
    C.msy[i] <- 0.8*MSY * rlnorm(n=1, meanlog=(-rsigma^2/2), sdlog=rsigma) # stochastic
    E.msy[i] <- C.msy[i]/(q*EBt.msy[i])
    EBt.msy[i+1] <- EBt.msy[i]+EBt.msy[i]*r*(1-(EBt.msy[i]/k))-C.msy[i]
  }
  
  B_B.08msy <- head(EBt.msy,-1)/BMSY
  E_E.08msy <- E.msy/EMSY
  
  temp.08msy <- data.frame(Year=Year, Catch=C.msy, Effort=E.msy, EstBt=head(EBt.msy,-1), B_B.08msy=B_B.08msy, E_E.08msy=E_E.08msy)
  
  # projection based on 0.9Emsy measure
  for (i in (nrow(df)+1):((nrow(df))+nyears)){
    E.Emsy[i] <- 0.9*EMSY
    C.Emsy[i] <- q*E.Emsy[i]*EBt.Emsy[i] * rlnorm(n=1, meanlog=(-rsigma^2/2), sdlog=rsigma) # stochastic
    EBt.Emsy[i+1] <- EBt.Emsy[i]+EBt.Emsy[i]*r*(1-(EBt.Emsy[i]/k))-C.Emsy[i]
  }
  
  B_B.09Emsy <- head(EBt.Emsy,-1)/BMSY
  E_E.09Emsy <- E.Emsy/EMSY
  
  temp.09Emsy <- data.frame(Year=Year, Catch=C.Emsy, Effort=E.Emsy, EstBt=head(EBt.Emsy,-1), B_B.09Emsy=B_B.09Emsy, E_E.09msy=E_E.09Emsy)
  
  # projection based on 0.7Emsy measure
  for (i in (nrow(df)+1):((nrow(df))+nyears)){
    E.Emsy[i] <- 0.7*EMSY
    C.Emsy[i] <- q*E.Emsy[i]*EBt.Emsy[i] * rlnorm(n=1, meanlog=(-rsigma^2/2), sdlog=rsigma) # stochastic
    EBt.Emsy[i+1] <- EBt.Emsy[i]+EBt.Emsy[i]*r*(1-(EBt.Emsy[i]/k))-C.Emsy[i]
  }
  
  B_B.07Emsy <- head(EBt.Emsy,-1)/BMSY
  E_E.07Emsy <- E.Emsy/EMSY
  
  temp.07Emsy <- data.frame(Year=Year, Catch=C.Emsy, Effort=E.Emsy, EstBt=head(EBt.Emsy,-1), B_B.07Emsy=B_B.07Emsy, E_E.07msy=E_E.07Emsy)
  
  # projection based on 0.5Emsy measure
  for (i in (nrow(df)+1):((nrow(df))+nyears)){
    E.Emsy[i] <- 0.5*EMSY
    C.Emsy[i] <- q*E.Emsy[i]*EBt.Emsy[i] * rlnorm(n=1, meanlog=(-rsigma^2/2), sdlog=rsigma) # stochastic
    EBt.Emsy[i+1] <- EBt.Emsy[i]+EBt.Emsy[i]*r*(1-(EBt.Emsy[i]/k))-C.Emsy[i]
  }
  
  B_B.05Emsy <- head(EBt.Emsy,-1)/BMSY
  E_E.05Emsy <- E.Emsy/EMSY
  
  temp.05Emsy <- data.frame(Year=Year, Catch=C.Emsy, Effort=E.Emsy, EstBt=head(EBt.Emsy,-1), B_B.05Emsy=B_B.05Emsy, E_E.05msy=E_E.05Emsy)
  
  res <- list(temp.08msy, temp.09Emsy, temp.07Emsy, temp.05Emsy)
  return(res)
}

NEq.Sch_proj(inpars=inpars, df=lemuruID, nyears=30, rsigma=.000000002)

# ######################################################################
# checking the functions
# ######################################################################

# find input parameters for sardinella lemuru ID
inpars_LID <- c(max(lemuruID$catch)*2, #k 2 or 15 => inpars 2 gives a make sense fitting plot
            max(lemuruID$catch)*2*0.9, #B0 2*.9 or 15*.9
            log(1.19), #r
            log(0.00002)) #q 0.000018 or 0.000002

NEq.Sch(inpars=inpars_LID, df=lemuruID)
NEq.Sch_opt(inpars=inpars_LID, df=lemuruID)

rprior_LID <- c(1.19, log(0.79), log(1.79)) # c(mean, lci, uci) from fishbase

# find input parameters for orange roughy NZ
inpars_ONZ <- c(max(oroughNZ$catch)*11, #k 15 or 11 => inpars 11 gives a lower NLL
            max(oroughNZ$catch)*11*0.9, #B0 15*.6 or 11*.9
            log(0.06), #r
            log(0.0002)) #q

NEq.Sch(inpars=inpars_ONZ, df=oroughNZ)
NEq.Sch_opt(inpars=inpars_ONZ, df=oroughNZ)

rprior_ONZ <- c(0.06, log(0.04), log(0.1)) # c(mean, lci, uci) from fishbase

# find the lowest NLL value among r range
niter <- 20
rvec_LID <- seq(from=rprior_LID[2], to=rprior_LID[3], length=niter)
rvec_ONZ <- seq(from=rprior_ONZ[2], to=rprior_ONZ[3], length=niter)
res_ONZ <- res_LID <- matrix(NA, nrow=niter, ncol=6)

for (i in 1:niter){
  inpars_LID[3] <- rvec_LID[i]
  tryCatch({
    y <- optim(par=inpars_LID, fn=NEq.Sch_opt, df=lemuruID, method="Nelder-Mead")
    res_LID[i,] <- c(exp(rvec_LID[i]), y$value, y$par[1], y$par[2], y$par[3], y$par[4])
  }, error=function(e){cat("Error :", conditionMessage(e), "\n")}
  )
}

for (i in 1:niter){
  inpars_ONZ[3] <- rvec_ONZ[i]
  tryCatch({
    y <- optim(par=inpars_ONZ, fn=NEq.Sch_opt, df=oroughNZ, method="Nelder-Mead")
    res_ONZ[i,] <- c(exp(rvec_ONZ[i]), y$value, y$par[1], y$par[2], y$par[3], y$par[4])
  }, error=function(e){cat("Error :", conditionMessage(e), "\n")}
  )
}

colnames(res_ONZ) <- colnames(res_LID) <- c("r.vec", "SumNLL", "k", "B0", "r", "q")
res_LID <- na.omit(res_LID)
res_ONZ <- na.omit(res_ONZ)

nrow(res_LID)
nrow(res_ONZ)
res_LID[which.min(res_LID[,2]),] # parameter with the lowest NLL value
res_ONZ[which.min(res_ONZ[,2]),] # parameter with the lowest NLL value

# insert the parameters generated from optimization process
inpars_LID.opt <- c(res_LID[which.min(res_LID[,2]),][[3]], #k
            res_LID[which.min(res_LID[,2]),][[4]], #B0
            res_LID[which.min(res_LID[,2]),][[5]], #r
            res_LID[which.min(res_LID[,2]),][[6]]) #q
NEq.Sch(inpars=inpars_LID.opt, df=lemuruID) # are they overfit? underfit?

inpars_ONZ.opt <- c(res_ONZ[which.min(res_ONZ[,2]),][[3]], #k
                res_ONZ[which.min(res_ONZ[,2]),][[4]], #B0
                res_ONZ[which.min(res_ONZ[,2]),][[5]], #r
                res_ONZ[which.min(res_ONZ[,2]),][[6]]) #q
NEq.Sch(inpars=inpars_ONZ.opt, df=oroughNZ) # are they overfit? underfit?

# create projection with confident interval value using stochastic model
nsims = 500
msy08_ONZ.opt = msy08_LID.opt = Emsy09_LID.opt = Emsy09_ONZ.opt =
  Emsy07_LID.opt = Emsy07_ONZ.opt = Emsy05_LID.opt = Emsy05_ONZ.opt = list()
for (i in 1:nsims){
  msy08_LID.opt[i] <- list(NEq.Sch_proj(inpars=inpars_LID.opt, df=lemuruID, nyears=30, rsigma=0.2)[[1]])
  msy08_ONZ.opt[i] <- list(NEq.Sch_proj(inpars=inpars_ONZ.opt, df=oroughNZ, nyears=30, rsigma=0.2)[[1]])
  Emsy09_ONZ.opt[i] <- list(NEq.Sch_proj(inpars=inpars_ONZ.opt, df=oroughNZ, nyears=30, rsigma=0.2)[[2]])
  Emsy09_LID.opt[i] <- list(NEq.Sch_proj(inpars=inpars_LID.opt, df=lemuruID, nyears=30, rsigma=0.2)[[2]])
  Emsy07_ONZ.opt[i] <- list(NEq.Sch_proj(inpars=inpars_ONZ.opt, df=oroughNZ, nyears=30, rsigma=0.2)[[3]])
  Emsy07_LID.opt[i] <- list(NEq.Sch_proj(inpars=inpars_LID.opt, df=lemuruID, nyears=30, rsigma=0.2)[[3]])
  Emsy05_ONZ.opt[i] <- list(NEq.Sch_proj(inpars=inpars_ONZ.opt, df=oroughNZ, nyears=30, rsigma=0.2)[[4]])
  Emsy05_LID.opt[i] <- list(NEq.Sch_proj(inpars=inpars_LID.opt, df=lemuruID, nyears=30, rsigma=0.2)[[4]])
}

sapply(msy08_LID.opt, "[[", 5) # colnames = c(Year, Catch, Effort, EstBt, B_Bmsy, E_Emsy)

# plotting
xyear_LID <- msy08_LID.opt[[1]][,1]
xyear_ONZ <- msy08_ONZ.opt[[1]][,1]

plotted.col <- 5 # colnames = c(Year, Catch, Effort, EstBt, B_B.08msy, E_E.08msy)

yval_LID.opt08msy <- sapply(msy08_LID.opt, "[[", plotted.col)
yval_LID.opt09Emsy <- sapply(Emsy09_LID.opt, "[[", plotted.col)
yval_LID.opt07Emsy <- sapply(Emsy07_LID.opt, "[[", plotted.col)
yval_LID.opt05Emsy <- sapply(Emsy05_LID.opt, "[[", plotted.col)

yval_ONZ.opt08msy <- sapply(msy08_ONZ.opt, "[[", plotted.col)
yval_ONZ.opt09Emsy <- sapply(Emsy09_ONZ.opt, "[[", plotted.col)
yval_ONZ.opt07Emsy <- sapply(Emsy07_ONZ.opt, "[[", plotted.col)
yval_ONZ.opt05Emsy <- sapply(Emsy05_ONZ.opt, "[[", plotted.col)

tail(xyear_LID, 1)

graphics.off()
par(mfrow=c(4,2), mar=c(0,0,0,0), oma=c(5,5,1,1))
matplot(x=xyear_LID, y=yval_LID.opt08msy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_LID[1], tail(xyear_LID, 1)), ylim=c(0, 2.7), xaxt="n") # all simulations
text(2028, 2.5, expression("Sardinella lemuru, 0.8msy"))
lines(x=xyear_LID, y=rowMeans(yval_LID.opt08msy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_LID, y=t(apply(yval_LID.opt08msy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_LID, y=t(apply(yval_LID.opt08msy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_LID[1:nrow(lemuruID)], y=rowMeans(yval_LID.opt08msy)[1:nrow(lemuruID)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)

matplot(x=xyear_ONZ, y=yval_ONZ.opt08msy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_ONZ[1], tail(xyear_ONZ, 1)), ylim=c(0, 2.7), xaxt="n", yaxt="n") # all simulations
text(2026, 2.5, expression("Orange roughy, 0.8msy"))
lines(x=xyear_ONZ, y=rowMeans(yval_ONZ.opt08msy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt08msy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt08msy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_ONZ[1:nrow(oroughNZ)], y=rowMeans(yval_ONZ.opt08msy)[1:nrow(oroughNZ)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)


matplot(x=xyear_LID, y=yval_LID.opt09Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_LID[1], tail(xyear_LID, 1)), ylim=c(0, 2.7), xaxt="n") # all simulations
text(2028, 2.5, expression("Sardinella lemuru, 0.9Emsy"))
lines(x=xyear_LID, y=rowMeans(yval_LID.opt09Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_LID, y=t(apply(yval_LID.opt09Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_LID, y=t(apply(yval_LID.opt09Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_LID[1:nrow(lemuruID)], y=rowMeans(yval_LID.opt09Emsy)[1:nrow(lemuruID)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)

matplot(x=xyear_ONZ, y=yval_ONZ.opt09Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_ONZ[1], tail(xyear_ONZ, 1)), ylim=c(0, 2.7), xaxt="n", yaxt="n") # all simulations
text(2026, 2.5, expression("Orange roughy, 0.9Emsy"))
lines(x=xyear_ONZ, y=rowMeans(yval_ONZ.opt09Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt09Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt09Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_ONZ[1:nrow(oroughNZ)], y=rowMeans(yval_ONZ.opt09Emsy)[1:nrow(oroughNZ)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)


matplot(x=xyear_LID, y=yval_LID.opt07Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_LID[1], tail(xyear_LID, 1)), ylim=c(0, 2.7), xaxt="n") # all simulations
text(2028, 2.5, expression("Sardinella lemuru, 0.7Emsy"))
lines(x=xyear_LID, y=rowMeans(yval_LID.opt07Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_LID, y=t(apply(yval_LID.opt07Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_LID, y=t(apply(yval_LID.opt07Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_LID[1:nrow(lemuruID)], y=rowMeans(yval_LID.opt07Emsy)[1:nrow(lemuruID)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)

matplot(x=xyear_ONZ, y=yval_ONZ.opt07Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_ONZ[1], tail(xyear_ONZ, 1)), ylim=c(0, 2.7), xaxt="n", yaxt="n") # all simulations
text(2026, 2.5, expression("Orange roughy, 0.7Emsy"))
lines(x=xyear_ONZ, y=rowMeans(yval_ONZ.opt07Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt07Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt07Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_ONZ[1:nrow(oroughNZ)], y=rowMeans(yval_ONZ.opt07Emsy)[1:nrow(oroughNZ)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)


matplot(x=xyear_LID, y=yval_LID.opt05Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_LID[1], tail(xyear_LID, 1)), ylim=c(0, 2.7)) # all simulations
text(2028, 2.5, expression("Sardinella lemuru, 0.5Emsy"))
lines(x=xyear_LID, y=rowMeans(yval_LID.opt05Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_LID, y=t(apply(yval_LID.opt05Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_LID, y=t(apply(yval_LID.opt05Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_LID[1:nrow(lemuruID)], y=rowMeans(yval_LID.opt05Emsy)[1:nrow(lemuruID)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)
mtext("Year", side=1, line=3, cex=1.2, outer=T)

matplot(x=xyear_ONZ, y=yval_ONZ.opt05Emsy, type="l", pch=1, col="grey", ylab="B/Bmsy", xlab="Year",
        xlim=c(xyear_ONZ[1], tail(xyear_ONZ, 1)), ylim=c(0, 2.7), yaxt="n") # all simulations
text(2026, 2.5, expression("Orange roughy, 0.5Emsy"))
lines(x=xyear_ONZ, y=rowMeans(yval_ONZ.opt05Emsy), col="red", lwd=2) # mean value from all simulations
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt05Emsy,1,quantile,c(0.025,0.975)))[,1], lty=2, col="blue", lwd=2) # lower confident interval
lines(x=xyear_ONZ, y=t(apply(yval_ONZ.opt05Emsy,1,quantile,c(0.025,0.975)))[,2], lty=2, col="blue", lwd=2) # upper confident interval
lines(x=xyear_ONZ[1:nrow(oroughNZ)], y=rowMeans(yval_ONZ.opt05Emsy)[1:nrow(oroughNZ)], col="black", lwd=2) # observation df
abline(h=1, col="grey", lty=3)
mtext("B/Bmsy", side=2, at=6, line=33, cex=1.2)

